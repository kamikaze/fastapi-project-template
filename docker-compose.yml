services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER:-root}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:-rootroot}"
    command: [
      "server",
      "/data",
      "--console-address",
      ":9001"
    ]
    volumes:
      - minio-data:/data

  rabbitmq-service:
    image: docker.io/rabbitmq:management
    container_name: rabbitmq-service
    environment:
      RABBITMQ_ERLANG_COOKIE: 'secret_cookie'
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./.docker/rabbitmq_init.sh:/rabbitmq_init.sh
    command: [ "bash", "-c", "/rabbitmq_init.sh" ]

  valkey-service:
    image: "docker.io/valkey/valkey:alpine"
    container_name: valkey
    command:
      - /bin/sh
      - -c
      - valkey-server --requirepass "$${VALKEY_PASSWORD}"
    ports:
      - "6379:6379"
    environment:
      VALKEY_REPLICATION_MODE: "master"
      VALKEY_PASSWORD: "${VALKEY_PASSWORD}"

  db:
    image: postgres:18-alpine
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-template_app_db}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-dev}"
      POSTGRES_USER: "${POSTGRES_USER:-dev}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h $$(hostname -i)" ]
      start_period: 3s
      interval: 3s
      timeout: 15s
      retries: 10
    volumes:
      - db:/var/lib/postgresql/17

  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-dev}:${POSTGRES_PASSWORD:-dev}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-template_app_db}?sslmode=disable"
    entrypoint: /bin/bash
    command: [
      "-c",
      "until pg_isready -h ${POSTGRES_HOST:-db} -d ${POSTGRES_DB:-template_app_db}; do echo 'wait for db'; sleep 1; done && pgweb --bind=0.0.0.0"
    ]
    depends_on:
      db:
        condition: service_healthy

  fastapi-template-migrate:
    build:
      context: ./
      dockerfile: Dockerfile
    image: fastapi-template-service
    container_name: fastapi-template-migrate
    environment:
      DB_DSN: "postgresql+asyncpg://${POSTGRES_USER:-dev}:${POSTGRES_PASSWORD:-dev}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-template_app_db}"
      LOGGING_LEVEL: "${LOGGING_LEVEL:-DEBUG}"
    entrypoint: python3
    command: ["-m", "alembic", "upgrade", "head"]
    depends_on:
      db:
        condition: service_healthy

  fastapi-template-service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: fastapi-template-service
    container_name: fastapi-template-service
    ports:
      - "8080:8080"
    environment:
      AMQP_DSN: "${AMQP_DSN:-amqp://guest:guest@rabbitmq-service/}"
      DB_DSN: "postgresql://${POSTGRES_USER:-dev}:${POSTGRES_PASSWORD:-dev}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-template_app_db}"
      LOGGING_LEVEL: "${LOGGING_LEVEL:-DEBUG}"
      OBJECT_STORAGE_ENDPOINT: "${OBJECT_STORAGE_ENDPOINT:-http://localhost:9000}"
      OBJECT_STORAGE_BUCKET: "${OBJECT_STORAGE_BUCKET:-test}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://localhost:9000}"
      AWS_REGION: "${AWS_REGION:-us-east-1}"
      S3_ADDRESSING_STYLE: "${S3_ADDRESSING_STYLE:-path}"
      S3_BUCKET: "${S3_BUCKET:-test}"
      S3_BUCKET_ROOT: "${S3_BUCKET_ROOT:-test}"
      S3_SECURE: "${S3_SECURE:-false}"
      S3_CERT_VERIFY: "${S3_CERT_VERIFY:-false}"
      S3_ACCESS_KEY_ID: "${S3_ACCESS_KEY_ID:-root}"
      S3_SECRET_ACCESS_KEY: "${S3_SECRET_ACCESS_KEY:-rootroot}"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
      rabbitmq-service:
        condition: service_started
      valkey-service:
        condition: service_started
      fastapi-template-migrate:
        condition: service_started

volumes:
  db:
  minio-data:
