[build-system]
requires = ["setuptools", "setuptools_scm", "setuptools_rust", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastapi-project-template"
description = "FastAPI project template"
authors = [
    { name = "Oleg Korsak", email = "kamikaze.is.waiting.you@gmail.com" }
]
license = "GPL-3.0"
readme = {file = "README.rst", content-type = "text/x-rst; charset=UTF-8"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
]
requires-python = "==3.13.*"
dynamic = ["version"]
dependencies = [
    "aiohttp[speedups]==3.12.15",
    "aioworldline==0.2.11",
    "alembic==1.16.5",
    "alembic_utils==0.8.8",
    "asyncpg==0.30.0",
    "Authlib==1.6.4",
    "certifi==2025.8.3",
    "fastapi-observability==1.0.0",
    "fastapi-pagination==0.14.1",
    "fastapi-slim==0.117.1",
    "fastapi-users-db-sqlalchemy==7.0.0",
    "fastapi-users[sqlalchemy]==14.0.1",
    "msgpack==1.1.1",
    "orjson==3.11.3",
    "passlib[argon2]==1.7.4",
    "pwdlib==0.2.1",
    "pydantic==2.11.9",
    "pydantic-settings==2.10.1",
    "PyJWT==2.10.1",
    "python-dateutil==2.9.0.post0",
    "python3-commons==0.9.20",
    "SQLAlchemy[asyncio]==2.0.43",
    "starlette==0.48.0",
    "uvicorn[standard]==0.37.0",
    "uvloop==0.21.0; platform_system == 'Linux'",
]

[project.urls]
"Homepage" = "https://github.com/kamikaze/fastapi-project-template"
"Documentation" = "https://github.com/kamikaze/fastapi-project-template/wiki"

[dependency-groups]
dev = [
    "build",
    "pip",
    "pre-commit",
    "pyright",
    "ruff",
    "setuptools",
    "setuptools_rust",
    "wheel",
    "tzdata"
]
testing = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[tool.setuptools]
zip-safe = false
package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests"]

[tool.setuptools.package-data]
fastapi_project_template = [
    "rustlib/Cargo.toml",
    "rustlib/lib.rs",
    "clib/extmod.c",
    "*.rst",
    "*.txt",
    "*.md"
]

[tool.setuptools.dynamic]
readme = {file = "README.rst"}
version = {attr = "setuptools_scm.get_version"}

[tool.setuptools_rust]
# Optional Rust-specific configuration
# Positioning of the compiled extension
extensionmodule = true

[tool.bdist_wheel]
universal = true

[tool.build_sphinx]
source_dir = "docs"
build_dir = "build/sphinx"

[tool.devpi.upload]
no-vcs = true
formats = ["bdist_wheel"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py313"

[tool.ruff.analyze]
detect-string-imports = true

[tool.ruff.lint]
select = [
    "FAST",
    "YTT",
    "ANN",
    "I",
    "E",
    "W",
    "PYI",

    "A",
#    "ARG",
    "ASYNC",
    "B",
    "C4",
    "DTZ",
    "EM",
    "EXE",
    "F",
    "FA",
    "FBT",
    "FLY",
    "FURB",
#    "G",
    "ICN",
    "INP",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PIE",
    "PLC",
    "PLE",
#    "PLR",
    "PLW",
    "PT",
    "PTH",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
]
ignore = [
    "ASYNC109",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.format]
exclude = ["*.pyi"]
indent-style = "space"
quote-style = "single"

[tool.pyright]
venvPath = "."
venv = ".venv"
reportMatchNotExhaustive = "error"
reportUnnecessaryComparison = "error"

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov fastapi_project_template --cov-fail-under=20 --cov-report term-missing --verbose"
norecursedirs = ["dist", "build", ".tox"]
testpaths = ["tests"]
