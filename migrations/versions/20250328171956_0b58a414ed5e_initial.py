"""initial

Revision ID: 0b58a414ed5e
Revises:
Create Date: 2025-03-28 17:19:56.079382+00:00

"""

import fastapi_users_db_sqlalchemy
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '0b58a414ed5e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    schema_upgrades()
    data_upgrades()


def downgrade():
    data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'rbac_permissions',
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.CheckConstraint("name ~ '^[a-z0-9_.]+$'", name='check_rbac_permissions_name'),
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'rbac_roles',
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'user_groups',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('id', sa.BIGINT(), nullable=False),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'rbac_role_permissions',
        sa.Column('role_uid', sa.UUID(), nullable=False),
        sa.Column('permission_uid', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ['permission_uid'], ['rbac_permissions.uid'], name='fk_rbac_role_permissions_permission', ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['role_uid'], ['rbac_roles.uid'], name='fk_rbac_role_permissions_role', ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('role_uid', 'permission_uid', name='pk_rbac_role_permissions'),
    )
    op.create_index(
        op.f('ix_rbac_role_permissions_permission_uid'), 'rbac_role_permissions', ['permission_uid'], unique=False
    )
    op.create_index(op.f('ix_rbac_role_permissions_role_uid'), 'rbac_role_permissions', ['role_uid'], unique=False)
    op.create_table(
        'users',
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('group_id', sa.BIGINT(), nullable=True),
        sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
        sa.Column('email', sa.String(length=320), nullable=False),
        sa.Column('hashed_password', sa.String(length=1024), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_superuser', sa.Boolean(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ['group_id'],
            ['user_groups.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table(
        'api_keys',
        sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True),
        sa.Column('partner_name', sa.String(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_api_key_user', ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('key'),
        sa.UniqueConstraint('partner_name'),
    )
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_table(
        'rbac_user_roles',
        sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
        sa.Column('role_uid', sa.UUID(), nullable=False),
        sa.Column('starts_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['role_uid'], ['rbac_roles.uid'], name='fk_rbac_user_roles_role', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_rbac_user_roles_user', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id', 'role_uid', name='pk_rbac_user_roles'),
    )
    op.create_index(op.f('ix_rbac_user_roles_role_uid'), 'rbac_user_roles', ['role_uid'], unique=False)
    op.create_index(op.f('ix_rbac_user_roles_user_id'), 'rbac_user_roles', ['user_id'], unique=False)
    op.create_table(
        'rbac_api_key_roles',
        sa.Column('api_key_uid', sa.UUID(), nullable=False),
        sa.Column('role_uid', sa.UUID(), nullable=False),
        sa.Column('starts_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ['api_key_uid'], ['api_keys.uid'], name='fk_rbac_api_key_roles_user', ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['role_uid'], ['rbac_roles.uid'], name='fk_rbac_api_key_roles_role', ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('api_key_uid', 'role_uid', name='pk_rbac_api_key_roles'),
    )
    op.create_index(op.f('ix_rbac_api_key_roles_api_key_uid'), 'rbac_api_key_roles', ['api_key_uid'], unique=False)
    op.create_index(op.f('ix_rbac_api_key_roles_role_uid'), 'rbac_api_key_roles', ['role_uid'], unique=False)
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rbac_api_key_roles_role_uid'), table_name='rbac_api_key_roles')
    op.drop_index(op.f('ix_rbac_api_key_roles_api_key_uid'), table_name='rbac_api_key_roles')
    op.drop_table('rbac_api_key_roles')
    op.drop_index(op.f('ix_rbac_user_roles_user_id'), table_name='rbac_user_roles')
    op.drop_index(op.f('ix_rbac_user_roles_role_uid'), table_name='rbac_user_roles')
    op.drop_table('rbac_user_roles')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_rbac_role_permissions_role_uid'), table_name='rbac_role_permissions')
    op.drop_index(op.f('ix_rbac_role_permissions_permission_uid'), table_name='rbac_role_permissions')
    op.drop_table('rbac_role_permissions')
    op.drop_table('user_groups')
    op.drop_table('rbac_roles')
    op.drop_table('rbac_permissions')
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
